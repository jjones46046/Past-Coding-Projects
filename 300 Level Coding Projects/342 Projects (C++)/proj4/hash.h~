// CMSC 341 - Fall 2020 - Project 4
// hash.h

// Templated, hash table implementation.  Each buckets is a heap.  A
// bucket contains objects with the same key values stored as a
// max-heap based on priority.  Collisions are resolved by linear
// probing.

// To work with Heap and HashTable, the template class T must provide
// the following:
//  (a) Default constructor
//  (b) priority function (unsigned priority())
//  (c) key function (string key())
//  (d) overloaded insertion operator

#ifndef _HASH_H
#define _HASH_H

#include <string>
#include "heap.h"

using std::string;

// Hash function typedef.  The hash function must return an 'unsigned
// int' value.  Reduction mod N is the responsiblity of the caller,
// not the hash function.
typedef unsigned (*hash_fn)(string);

class Grader;

template <class T>
class HashTable {

  friend Grader;
  
 public:
  // Constructor.  Requires table size and hash function.
  HashTable(unsigned size, hash_fn hash) {
    _N = size;
    _n = 0;
    _hash = hash;
    _table = new Heap<T> [size];
  }

  // Destructor, copy, and assignment
  ~HashTable() {
    delete [] _table;
    _hash = NULL;
    _N = 0;
    _n = 0;
  }
  
  //Copy constructor
  HashTable(const HashTable<T>& ht) {
    _N = ht._N;
    _n = ht._n;
    _hash = ht._hash;
    
    Heap<T> * temp = new Heap<T> [ht._N];
    for(int i = 0; i < ht._N; i++) {
      temp[i] = ht._table[i];
    }
    _table = temp; 
  }
  
  //Assignment Operator
  const HashTable<T>& operator=(const HashTable<T>& ht) {
    //Deleting any existing data within _table preventing memory leaks
    delete [] _table;
      _N = ht._N;
      _n = ht._n;
      _hash = ht._hash;
      //Create a new heap used to create a deep copy of ht's table
      Heap<T> * temp = new Heap<T> [ht._N];
      for(int i = 0; i < ht._N; i++) {
	temp[i] = ht._table[i];
      }
      
      _table = temp;

      return *this;
    delete temp;
  }

  // In-line functions
  
  // Table size; set by constructor
  unsigned tableSize() const {
    return _N;
  }
  
  // Number of entries in the table
  unsigned numEntries() const {
    return _n;
  }
  
  // Load factor
  float lambda() const {
    return ((float) _n) / _N;
  }

  // Main hash table functions
  
  // insert returns 'true' if successful; 'false' otherwise
  bool insert(const T& object);
  // getNext retrieves **and removes** the highest priority order of
  // type indicated by key.  It returns 'true' if successful; 'false'
  // otherwise.
  bool getNext(string key, T& obj);

  // Dump the entire hash table
  void dump() const;
  
 private:
  unsigned _N;       // hash table size
  unsigned _n;       // current number of entries
  hash_fn _hash;     // hash function
  Heap<T> *_table;   // array of heaps

  // ***********************************************
  // Private helper function declarations go here! *
  // ***********************************************
  
};

// *****************************************
// Templated function definitions go here! *
// *****************************************


template <typename T>
bool HashTable<T>::insert(const T& object) {
  int value = _hash(object.key());
  //Applying MOD function
  value = value % _N;
  
 //Ending insert if the hash table is already full.
  if(_n == _N) {
    cout << "Hash table is full for new entries" << endl;
    return false;    
  }

  else {  
    //Finding the next open spot using linear probing.
    while (!_table[value].empty() and _table[value].readTop().key() != object.key()) {
      //cout << "probe found bucket filled, looking for next slot." << endl;
      value++;
      value %= _N;
    }
    //Empty slot found so we add a new heap.
    if(_table[value].empty()) {
      _table[value].inserth(object);
      _n++;
    }
    //Bucket found with same key value.
    else {
      _table[value].inserth(object);
    }
    return true;
  }
}

template <typename T>
bool HashTable<T>::getNext(string key, T& obj) {
  //Using the same hash function and Modular compression as insert
  int value = _hash(key);
  value = value % _N;

  //Installing a counter to prevent infinite loops if the key does not exist.
  unsigned counter = 0;
  while (_table[value].readTop().key() != key and counter != _N) {
    value++;
    value %= _N;
    counter++;
  }


  if (counter == _N) {
    //The key we are looking for isnt in the hash. Should've looped through once.
    //Might waste computation time but we know for sure the key isn't there.
    return false;
  }

  else {
    //Return the top value to obj, then delete the top object.
    obj = _table[value].readTop();
    _table[value].removeTop();
    _n--;
  }
  
  
  return true;
}

template <typename T>
void HashTable<T>::dump() const {
  cout << endl;
  for(unsigned i = 0; i < _N; i++) {
    cout << "Bucket #: " << i << ": ";
    _table[i].dump();
    cout << endl;
  }
}

#endif
